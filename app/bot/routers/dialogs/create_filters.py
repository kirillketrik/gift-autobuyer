from aiogram import types, F
from aiogram_dialog import Dialog, Window
from aiogram_dialog import DialogManager
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Button, Row, Cancel, Back, SwitchTo
from aiogram_dialog.widgets.text import Const, Format
from dishka import FromDishka
from dishka.integrations.aiogram_dialog import inject

from app.bot.states import EditGiftFilterSG
from app.core.interfaces.repository import GiftFilterRepository
from app.utils.filters import parse_text_to_filters, parse_name_value_line
from app.utils.formatters import format_filter, paginate_text_blocks


@inject
async def on_save_filters(
        _,
        __,
        manager: DialogManager,
        gift_filter_repository: FromDishka[GiftFilterRepository]
):
    filters = manager.dialog_data.get("filters", [])

    for data in filters:
        await gift_filter_repository.save(data)

    await manager.done()


async def get_paginated_filters(dialog_manager: DialogManager, **_kwargs):
    filters = dialog_manager.dialog_data.get("filters", [])
    pages = dialog_manager.dialog_data.get("filter_pages")
    page_index = dialog_manager.dialog_data.get("filter_page_index", 0)

    if pages is None:
        formatted_blocks = [
            format_filter(f, index=i) for i, f in enumerate(filters)
        ]
        pages = paginate_text_blocks(formatted_blocks)
        dialog_manager.dialog_data["filter_pages"] = pages

    page_index = max(0, min(page_index, len(pages) - 1))
    dialog_manager.dialog_data["filter_page_index"] = page_index
    page_info = f"<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_index + 1} –∏–∑ {len(pages)}</b>" if len(pages) > 1 else ""
    return {
        "filters_text": pages[page_index],
        "page_info": page_info,
        "pages": len(pages),
    }


async def on_prev_page(_, __, manager: DialogManager):
    manager.dialog_data["filter_page_index"] = max(0, manager.dialog_data.get("filter_page_index", 0) - 1)


async def on_next_page(_, __, manager: DialogManager):
    pages = manager.dialog_data.get("filter_pages", [])
    manager.dialog_data["filter_page_index"] = min(len(pages) - 1, manager.dialog_data.get("filter_page_index", 0) + 1)


async def on_select_mode(callback: types.CallbackQuery, _, manager: DialogManager):
    mode = callback.data
    if mode == "ai":
        await manager.switch_to(EditGiftFilterSG.input_promt)
    elif mode == "manual":
        await manager.switch_to(EditGiftFilterSG.input_manually)


async def on_ai_input(message: types.Message, _, manager: DialogManager):
    await message.answer(
        text=(
            "‚è≥ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</b>\n\n"
            "–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã.\n"
            "–≠—Ç–æ –∑–∞–π–º—ë—Ç –º–µ–Ω–µ–µ 30 —Å–µ–∫—É–Ω–¥."
        )
    )

    filters = await parse_text_to_filters(query=message.text)

    if filters:
        manager.dialog_data["filters"] = filters
        await manager.switch_to(EditGiftFilterSG.confirm)
    else:
        await message.answer(
            text=(
                "‚ö†Ô∏è <b>–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â—ë —Ä–∞–∑.\n\n"
                "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
            )
        )


# –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä—É—á–Ω—É—é
async def on_manual_input(message, _, manager: DialogManager):
    try:
        filters = parse_name_value_line(text=message.text)
        manager.dialog_data["filters"] = filters
        await manager.switch_to(EditGiftFilterSG.confirm)
    except Exception:
        await message.answer(
            text=(
                "‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>name=value</code>, "
                "—Ä–∞–∑–¥–µ–ª—è—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–≤—É–º—è –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏.\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "<code>min_price=100 max_price=500</code>\n\n"
                "<code>priority=10 max_spend_money=1000</code>"
            )
        )


# –î–∏–∞–ª–æ–≥
dialog = Dialog(
    Window(
        Const("<b>üí° –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>"),
        Row(
            Button(Const("üß† –° –ø–æ–º–æ—â—å—é –ò–ò"), id="ai", on_click=on_select_mode),
            Button(Const("‚úçÔ∏è –í—Ä—É—á–Ω—É—é (name=value)"), id="manual", on_click=on_select_mode),
        ),
        Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
        state=EditGiftFilterSG.select_mode,
    ),
    Window(
        Const(
            """
<b>üß† –û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å.</b>

<i> –ü—Ä–∏–º–µ—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ README.md —Ñ–∞–π–ª–µ –≤ <b>–≥–ª–∞–≤–µ 2.2.4</b></i>
"""
        ),
        MessageInput(on_ai_input),
        Back(Const("üîô –ù–∞–∑–∞–¥")),
        state=EditGiftFilterSG.input_promt,
    ),

    Window(
        Const(
            """
‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–∏–º—è=–∑–Ω–∞—á–µ–Ω–∏–µ</code></b>

<b>- –ü—Ä–æ–±–µ–ª –¥–æ–ª–∂–µ–Ω —Ä–∞–∑–¥–µ–ª—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞</b>
<b>- –î–≤–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–¥–µ–ª—è—Ç—å —Ä–∞–∑–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã</b>

<i> –ü—Ä–∏–º–µ—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ README.md —Ñ–∞–π–ª–µ –≤ <b>–≥–ª–∞–≤–µ 2.2.5</b></i>
"""),
        MessageInput(on_manual_input),
        SwitchTo(
            Const("üîô –ù–∞–∑–∞–¥"),
            id='to_select_mode',
            state=EditGiftFilterSG.select_mode,
        ),
        state=EditGiftFilterSG.input_manually,
    ),
    Window(
        Format(
            "<b>üîî –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n\n{filters_text}\n\n{page_info}"
        ),
        Row(
            Button(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), id="prev", on_click=on_prev_page),
            Button(Const("‚û°Ô∏è –î–∞–ª–µ–µ"), id="next", on_click=on_next_page),
            when=F['pages'] > 1
        ),
        Row(
            Button(Const("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"), id="save", on_click=on_save_filters),
            Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
        ),
        getter=get_paginated_filters,
        state=EditGiftFilterSG.confirm,
    )
)
