from aiogram import types, F
from aiogram_dialog import Dialog, Window
from aiogram_dialog import DialogManager
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Button, Row, Cancel, Back
from aiogram_dialog.widgets.text import Const, Format
from dishka import FromDishka
from dishka.integrations.aiogram_dialog import inject

from app.bot.states import EditGiftFilterSG
from app.core.interfaces.repository import GiftFilterRepository
from app.utils.filters import parse_text_to_filters, parse_name_value_line
from app.utils.formatters import format_filter, paginate_text_blocks


@inject
async def on_save_filters(
        _,
        __,
        manager: DialogManager,
        gift_filter_repository: FromDishka[GiftFilterRepository]
):
    filters = manager.dialog_data.get("filters", [])

    for data in filters:
        await gift_filter_repository.save(data)

    await manager.done()


async def get_paginated_filters(dialog_manager: DialogManager, **kwargs):
    filters = dialog_manager.dialog_data.get("filters", [])
    pages = dialog_manager.dialog_data.get("filter_pages")
    page_index = dialog_manager.dialog_data.get("filter_page_index", 0)

    if pages is None:
        formatted_blocks = [
            format_filter(f, index=i) for i, f in enumerate(filters)
        ]
        pages = paginate_text_blocks(formatted_blocks)
        dialog_manager.dialog_data["filter_pages"] = pages

    page_index = max(0, min(page_index, len(pages) - 1))
    dialog_manager.dialog_data["filter_page_index"] = page_index
    page_info = f"<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_index + 1} –∏–∑ {len(pages)}</b>" if len(pages) > 1 else ""
    return {
        "filters_text": pages[page_index],
        "page_info": page_info,
        "pages": len(pages),
    }


async def on_prev_page(_, __, manager: DialogManager):
    manager.dialog_data["filter_page_index"] = max(0, manager.dialog_data.get("filter_page_index", 0) - 1)


async def on_next_page(_, __, manager: DialogManager):
    pages = manager.dialog_data.get("filter_pages", [])
    manager.dialog_data["filter_page_index"] = min(len(pages) - 1, manager.dialog_data.get("filter_page_index", 0) + 1)


async def on_select_mode(callback: types.CallbackQuery, _, manager: DialogManager):
    mode = callback.data
    if mode == "ai":
        await manager.switch_to(EditGiftFilterSG.input_promt)
    elif mode == "manual":
        await manager.switch_to(EditGiftFilterSG.input_manually)


async def on_ai_input(message: types.Message, _, manager: DialogManager):
    await message.answer(
        text='<b>‚è≥ –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –ò–ò —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –≠—Ç–æ –∑–∞–π–º—ë—Ç –º–µ–Ω–µ–µ 30 —Å–µ–∫—É–Ω–¥.</b>'
    )

    filters = await parse_text_to_filters(query=message.text)

    if filters:
        manager.dialog_data["filters"] = filters
        await manager.switch_to(EditGiftFilterSG.confirm)
    else:
        await message.answer(
            text='<b>‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!</b>\n\n'
                 '<i>‚ùï –ï—Å–ª–∏ –ø–æ—Å–ª–µ –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–µ–º –∂–µ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º!</i>'
        )


# –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä—É—á–Ω—É—é
async def on_manual_input(message, _, manager: DialogManager):
    try:
        filters = parse_name_value_line(text=message.text)
        manager.dialog_data["filters"] = filters
        await manager.switch_to(EditGiftFilterSG.confirm)
    except Exception:
        await message.answer(
            text='<b>‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –í–∏–¥–∏–º–æ –≤—ã –Ω–µ —Å–æ–±–ª—é–ª–∏ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>'
        )


# –î–∏–∞–ª–æ–≥
dialog = Dialog(
    Window(
        Const("<b>üí° –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b>"),
        Row(
            Button(Const("üß† –° –ø–æ–º–æ—â—å—é –ò–ò"), id="ai", on_click=on_select_mode),
            Button(Const("‚úçÔ∏è –í—Ä—É—á–Ω—É—é (name=value)"), id="manual", on_click=on_select_mode),
        ),
        Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
        state=EditGiftFilterSG.select_mode,
    ),
    Window(
        Const(
            "<b>üß† –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º.</b>\n\n"
            "<b>‚ùï –í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª–æ–≤–∏–π ‚Äî –∫–∞–∂–¥–æ–µ –∏–∑ –Ω–∏—Ö –±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä.</b>\n\n"
            "<b>üí° –ü—Ä–∏–º–µ—Ä:</b>\n"
            "1) –•–æ—á—É –ø–æ–∫—É–ø–∞—Ç—å –¥–µ—à—ë–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –¥–æ 300 –∑–≤—ë–∑–¥, –º–∞–∫—Å–∏–º—É–º 5 —à—Ç—É–∫.\n"
            "2) –¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Ç 500 –∑–≤—ë–∑–¥, –Ω–æ –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –±–æ–ª—å—à–µ 2000."
            "–ù–∞ –≤—ã—Ö–æ–¥–µ –º—ã –ø–æ–ª—É—á–∏–º 2 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞"
        ),
        MessageInput(on_ai_input),
        Back(Const("üîô –ù–∞–∑–∞–¥")),
        state=EditGiftFilterSG.input_promt,
    ),

    # 3Ô∏è‚É£ –í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é
    Window(
        Const(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ name=value.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å **–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤**, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –¥–≤—É–º—è –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ (`\\n\\n`).\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "min_price=100 max_price=500 enabled=True\n\n"
            "priority=10 max_spend_money=1000 enabled=False"
        ),
        MessageInput(on_manual_input),
        Back(Const("üîô –ù–∞–∑–∞–¥")),
        state=EditGiftFilterSG.input_manually,
    ),

    # 4Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    Window(
        Format("<b>üîî –§–∏–ª—å—Ç—Ä—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã:</b>\n\n{filters_text}\n\n{page_info}"),
        Row(
            Button(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), id="prev", on_click=on_prev_page),
            Button(Const("‚û°Ô∏è –î–∞–ª–µ–µ"), id="next", on_click=on_next_page),
            when=F['pages'] > 1
        ),
        Row(
            Button(Const("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"), id="save", on_click=on_save_filters),
            Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
        ),
        getter=get_paginated_filters,
        state=EditGiftFilterSG.confirm,
    )
)
