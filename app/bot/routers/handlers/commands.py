from aiogram import Router, types
from aiogram.filters import Command
from aiogram_dialog import DialogManager, StartMode, ShowMode

from app.bot.states import EditGiftFilterSG, DeleteFilterSG, SetReceiversSG, MainMenuSG, AuthSG
from app.database.models import GiftFilterModel
from app.models import GiftFilter
from app.utils.formatters import format_filter, paginate_text_blocks

router = Router()


@router.message(Command('start'))
async def start_bot(msg: types.Message, dialog_manager: DialogManager):
    await msg.answer(
        "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ–¥–∞—Ä–∫–∏ –≤ Telegram –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º. "
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ (—Ü–µ–Ω–∞, —Ä–µ–¥–∫–æ—Å—Ç—å, –ª–∏–º–∏—Ç—ã) –∏ —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.\n\n"
        "üì¶ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ —Å —É—á—ë—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏ –±—é–¥–∂–µ—Ç–∞\n\n"
        "‚öôÔ∏è <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n"
        "<code>/create_filters</code> ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n"
        "<code>/show_filters</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "<code>/delete_filters</code> ‚Äî —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ ID\n\n"
        "<code>/set_receivers user1,user2</code> ‚Äî —É–∫–∞–∑–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤\n"
        "<code>/show_receivers</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π\n\n"
        "üí° –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç –Ω–∞—á–Ω—ë—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Ö –ø–æ–∫—É–ø–∞—Ç—å –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º.",
        parse_mode="HTML"
    )
    await dialog_manager.start(
        state=MainMenuSG.menu,
        mode=StartMode.RESET_STACK,
        show_mode=ShowMode.DELETE_AND_SEND
    )


@router.message(Command('show_filters'))
async def show_filters(msg: types.Message):
    filters = await GiftFilterModel.all().order_by("id")

    if not filters:
        await msg.answer("<b>‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞.</b>")
        return

    texts = [format_filter(GiftFilter.model_validate(f)) for f in filters]
    blocks = paginate_text_blocks(texts)
    for index, block in enumerate(blocks):
        text = f"<b>üìë –°—Ç—Ä–∞–Ω–∏—Ü–∞ {index + 1}/{len(blocks)}</b>\n\n" + block
        await msg.answer(text)


@router.message(Command('create_filters'))
async def edit_filters(_, dialog_manager: DialogManager):
    await dialog_manager.start(
        state=EditGiftFilterSG.select_mode,
        mode=StartMode.RESET_STACK,
        show_mode=ShowMode.DELETE_AND_SEND
    )




@router.message(Command('delete_filters'))
async def start_delete_filters(_, dialog_manager: DialogManager):
    await dialog_manager.start(
        state=DeleteFilterSG.input_ids,
        mode=StartMode.RESET_STACK,
        show_mode=ShowMode.DELETE_AND_SEND
    )


@router.message(Command("set_receivers"))
async def start_set_receivers_dialog(_, dialog_manager: DialogManager):
    await dialog_manager.start(
        state=SetReceiversSG.input_usernames,
        mode=StartMode.RESET_STACK,
        show_mode=ShowMode.DELETE_AND_SEND
    )

@router.message(Command('auth'))
async def edit_filters(_, dialog_manager: DialogManager):
    await dialog_manager.start(
        state=AuthSG.phone,
        mode=StartMode.RESET_STACK,
        show_mode=ShowMode.DELETE_AND_SEND
    )