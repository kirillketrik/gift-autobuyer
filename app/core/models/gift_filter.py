from typing import Optional, Annotated

from pydantic import BaseModel, Field

from .gift import Gift

from typing import Optional, Literal
from pydantic import BaseModel


class GiftFilter(BaseModel):
    """
    GiftFilter используется для фильтрации, сортировки и приоритезации подарков
    при их автоматическом выборе и покупке. Каждый фильтр задаёт условия отбора
    и ограничения на бюджет, количество покупок и порядок сортировки.
    """

    id: Optional[int] = None
    """Уникальный идентификатор фильтра (присваивается при сохранении в БД)."""

    enabled: bool = True
    """Флаг, указывающий, активен ли фильтр."""

    min_supply: int = -1
    """Минимально допустимое количество выпущенных подарков. Значение < 0 отключает фильтрацию."""

    max_supply: int = -1
    """Максимально допустимое количество выпущенных подарков. Значение < 0 отключает фильтрацию."""

    min_price: int = -1
    """Минимальная цена подарка. Значение < 0 отключает фильтрацию."""

    max_price: int = -1
    """Максимальная цена подарка. Значение < 0 отключает фильтрацию."""

    priority: int = 0
    """Приоритет фильтра. Чем выше значение, тем раньше будет применён фильтр."""

    weight: int = 0
    """
    Вес фильтра при распределении общего бюджета.

    Если задано значение > 0, фильтр будет участвовать в распределении доступного бюджета
    пропорционально своему весу.

    Формула:
        (вес текущего фильтра / сумма весов всех активных фильтров) * общий_бюджет

    Если значение <= 0 — фильтр исключается из бюджетного распределения.
    """

    max_buy_count: int = -1
    """Максимальное количество покупок одного подарка. -1 означает отсутствие ограничения."""

    max_spend_money: int = -1
    """Максимальное количество звёзд, которое может быть потрачено на один подарок. -1 означает отсутствие ограничения."""

    ordering: Literal["+price", "-price", "+supply", "-supply"] = "-price"
    """
    Правило сортировки подарков, прошедших фильтр.

    Формат:
      - '+' перед полем означает сортировку по возрастанию;
      - '-' перед полем означает сортировку по убыванию.

    Доступные поля:
      - `price`: цена подарка;
      - `supply`: количество доступных подарков.

    Примеры:
      - `+price`: сначала дешёвые;
      - `-supply`: сначала самые массовые.
    """

    class Config:
        from_attributes = True

    def match(self, gift: Gift) -> bool:
        """
        Проверяет, подходит ли подарок под условия фильтрации.

        Возвращает True, если подарок удовлетворяет всем активным условиям,
        иначе — False.
        """
        if not gift.supply or not gift.price:
            return False
        if self.min_supply > 0 and gift.supply < self.min_supply:
            return False
        if 0 < self.max_supply < gift.supply:
            return False
        if self.min_price > 0 and gift.price < self.min_price:
            return False
        if 0 < self.max_price < gift.price:
            return False
        return True
