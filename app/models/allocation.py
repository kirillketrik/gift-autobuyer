from pydantic import BaseModel, Field

from .gift import Gift
from .gift_filter import GiftFilter


class GiftAllocation(BaseModel):
    filter: GiftFilter
    gift: Gift
    buy_amount: int = Field(..., description='–ö–æ–ª-–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç –∫—É–ø–∏—Ç—å')


class GiftAllocationRule(BaseModel):
    min_supply: int = -1
    """
    –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏—Ä–∞–∂–∞ (supply), —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –ø–æ–¥–∞—Ä–∫–∏, –ø–æ–ø–∞–¥–∞—é—â–∏–µ –ø–æ–¥ –¥–∞–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ.
    –ù–∞–ø—Ä–∏–º–µ—Ä, min_supply=0 –≤–∫–ª—é—á–∞–µ—Ç –≤ –≤—ã–±–æ—Ä–∫—É —Å–∞–º—ã–µ —Ä–µ–¥–∫–∏–µ –ø–æ–¥–∞—Ä–∫–∏.
    """

    max_supply: int = -1
    """
    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏—Ä–∞–∂–∞ (supply), –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–æ.
    –ù–∞–ø—Ä–∏–º–µ—Ä, max_supply=1000 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–¥–∞—Ä–∫–∏ —Å supply ‚â§ 1000 –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã.
    """

    min_price: int = -1
    """
    –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–∞–≤–∏–ª—É.
    –ï—Å–ª–∏ —Ä–∞–≤–Ω–æ 0, –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —Ü–µ–Ω—ã –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è.
    """

    max_price: int = -1
    """
    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–∞–≤–∏–ª—É.
    –ï—Å–ª–∏ —Ä–∞–≤–Ω–æ 0, –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —Ü–µ–Ω—ã –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è.
    """

    weight: int = 0
    """
    –í–µ—Å–æ–≤–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞.
    –ß–µ–º –≤—ã—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º –±–æ–ª—å—à–∞—è –¥–æ–ª—è –æ–±—â–µ–≥–æ –±—é–¥–∂–µ—Ç–∞ –≤—ã–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é.
    –ú–æ–∂–µ—Ç –±—ã—Ç—å 0, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `priority`.
    """

    priority: int = 0
    """
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∞–≤–∏–ª–∞.
    –ï—Å–ª–∏ > 0, –ø—Ä–∞–≤–∏–ª–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞–Ω—å—à–µ –¥—Ä—É–≥–∏—Ö –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞, –∏ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥–∞—Ä–∫–∏ –±—É–¥—É—Ç –ø–æ–∫—É–ø–∞—Ç—å—Å—è,
    –ø–æ–∫–∞ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è `weight`).
    –ï—Å–ª–∏ —Ä–∞–≤–Ω–æ 0, –ø—Ä–∞–≤–∏–ª–æ —É—á–∞—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≤–µ—Å–æ–≤–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏.
    """

    max_count: int = -1
    """
    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–∞–≤–∏–ª—É.
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è **—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç** (`priority > 0`).
    –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ > 0, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫, –¥–∞–∂–µ –µ—Å–ª–∏ —Ö–≤–∞—Ç–∞–µ—Ç –±—é–¥–∂–µ—Ç–∞.
    –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ -1 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é), –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.
    """

    exclude: bool = False
    """
    –ò—Å–∫–ª—é—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    –ï—Å–ª–∏ True ‚Äî –Ω–∏ –æ–¥–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫—É–ø–∫–∏ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è.
    –£–¥–æ–±–Ω–æ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è.
    """

    @classmethod
    def validate_rule(cls, rule: "GiftAllocationRule") -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –ø—Ä–∞–≤–∏–ª–∞:
        üîπ 1. –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: –ø–æ supply, –ø–æ —Ü–µ–Ω–µ –∏–ª–∏ –∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏—è.
        üîπ 2. –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: –ª–∏–±–æ `priority`, –ª–∏–±–æ `weight > 0`.
        """

        if rule.exclude:
            return  # –ü—Ä–∞–≤–∏–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–æ ‚Äî –Ω–µ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–ª—å—à–µ

        if not (rule.has_supply_filter or rule.has_price_filter):
            raise ValueError(
                "–ü—Ä–∞–≤–∏–ª–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä: –ø–æ supply –∏–ª–∏ –ø–æ —Ü–µ–Ω–µ "
                "(min_supply/max_supply –∏–ª–∏ min_price/max_price)"
            )

        if rule.weight <= 0 and rule.priority <= 0:
            raise ValueError(
                "–ü—Ä–∞–≤–∏–ª–æ –¥–æ–ª–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: "
                "–ª–∏–±–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (priority > 0), –ª–∏–±–æ –≤–µ—Å–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (weight > 0)"
            )

    @property
    def has_supply_filter(self) -> bool:
        return self.min_supply >= 0 and self.max_supply >= 0

    @property
    def has_price_filter(self) -> bool:
        return self.min_price >= 0 and self.max_price >= 0

    def match(self, gift: Gift) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –ª–∏ –ø–æ–¥–∞—Ä–æ–∫ —É—Å–ª–æ–≤–∏—è–º –ø—Ä–∞–≤–∏–ª–∞:
        —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —è–≤–Ω–æ –∑–∞–¥–∞–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã (>= 0).
        """
        if not gift.supply or not gift.price:
            return True
        if gift.supply < self.min_supply >= 0:
            return False
        if 0 <= self.max_supply < gift.supply:
            return False
        if gift.price < self.min_price >= 0:
            return False
        if 0 <= self.max_price < gift.price:
            return False
        return True

    def __eq__(self, other: "GiftAllocationRule") -> bool:
        if not isinstance(other, GiftAllocationRule):
            return False
        return (
            self.min_supply, self.max_supply, self.min_price, self.max_price
        ) == (
            other.min_supply, other.max_supply, other.min_price, other.max_price
        )

    def __str__(self):
        if self.exclude:
            return "Rule is excluded from allocation."

        parts = []

        # Supply filter
        if self.has_supply_filter:
            parts.append(f"Supply between {self.min_supply} and {self.max_supply}")
        elif self.min_supply >= 0:
            parts.append(f"Supply ‚â• {self.min_supply}")
        elif self.max_supply >= 0:
            parts.append(f"Supply ‚â§ {self.max_supply}")

        # Price filter
        if self.has_price_filter:
            parts.append(f"Price between {self.min_price} and {self.max_price}")
        elif self.min_price >= 0:
            parts.append(f"Price ‚â• {self.min_price}")
        elif self.max_price >= 0:
            parts.append(f"Price ‚â§ {self.max_price}")

        # Strategy
        if self.priority > 0:
            strategy = f"Priority {self.priority}"
            if self.max_count > 0:
                strategy += f", max {self.max_count} items"
            parts.append(strategy)
        elif self.weight > 0:
            parts.append(f"Weight {self.weight}")

        return "; ".join(parts) if parts else "No active filters or strategy defined."
